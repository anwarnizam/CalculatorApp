<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.test.devops</groupId>
  <artifactId>CalculatorApp</artifactId>
  <packaging>war</packaging>
  <version>0.0.1-SNAPSHOT</version>
  <name>CalculatorApp Maven Webapp</name>
  <url>http://maven.apache.org</url>
  <!-- Use this to send the war to JFrog Artifactory when using "mvn deploy" command. For this to work,
  		 the <id/> sections in your <distributionManagement/> tag of your pom.xml should match those in your 
  		 <server/> sections of your settings.xml file. -->
  <distributionManagement>
	<snapshotRepository>
	  <id>snapshots</id>
	     <name>Calculator App JFrog Snapshots Repository</name>
	     <url>http://localhost:8082/artifactory/calculator-app-snapshot</url>
	</snapshotRepository>
  </distributionManagement>
  <!-- Use this property if Force authentication is enabled in sonar server.
  		 You can check by log-in to server and go to Administration -> Configuration -> Security -->
  <properties>
  	<sonar.login>admin</sonar.login>
  	<sonar.password>admin</sonar.password>
  	<!-- Not needed if localhost:9000 -->
  	<sonar.host.url>http://localhost:9000</sonar.host.url>
  </properties>
  <dependencies>
	  <dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-context</artifactId>
	    <version>4.1.6.RELEASE</version>
	  </dependency>
	  <dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-webmvc</artifactId>
	    <version>4.1.6.RELEASE</version>
	</dependency>  
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>jstl</artifactId>
      <version>1.2</version>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <version>2.5</version>
    </dependency>
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-jdbc</artifactId>
	    <version>4.0.3.RELEASE</version>
	</dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <finalName>CalculatorApp</finalName>
    <plugins>
    
    <!-- Deploy war file to local tomcat webapps folder and also to tomcat server gui - Manager app.
    		But for this to happen:
    		1. Add a user with role manager-script in tomcat-users.xml
    		2. Add this tomcat user under a corresponding <server> block to your maven settings.xml
    		3. Tomcat[container] must be running
    		Then execute mvn clean tomcat7:deploy or mvn clean tomcat7:redeploy
     -->
      
      <!-- <plugin>
        <groupId>org.apache.tomcat.maven</groupId>
        <artifactId>tomcat7-maven-plugin</artifactId>
        <version>2.2</version>
        <configuration> -->
          <!-- Indicates the server name used in settings.xml  -->
          <!--<server>tomcat</server>
          <url>http://localhost:8085/manager/text</url>
        </configuration>
      </plugin>-->
      
    <!-- If want to use specific sonar plugin instead of maven default sonar plugin-->
    	<!-- <plugin>
    		<groupId>org.sonarsource.scanner.maven</groupId>
    		<artifactId>sonar-maven-plugin</artifactId>
    		<version>3.6.0.1398</version>
    	</plugin> -->
    </plugins>
  </build>
  
  <!--
    To have maven automatically deploy the exploded WAR to your local tomcat instance or webapps folder:
    	create profile with id development and configure the property "tomcat.home" in your settings.xml
    	with tomcat installation directory and enable this profile as a default active profile in your
    	settings.xml or not active as default in settings then on demand with the -P flag
    -->
 
  <profiles>
    <profile>
      <id>development</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <version>1.5.0</version>
            <configuration>
              <!-- Container configuration -->
              <container>
                <containerId>tomcat8x</containerId>
                <home>${tomcat.home}</home>
              </container>
              <configuration>
                <type>existing</type>
                <home>${tomcat.home}</home>
              </configuration>
              <deployables>
                <deployable>
                  <groupId>${project.groupId}</groupId>
                  <artifactId>${project.artifactId}</artifactId>
                  <type>war</type>
                  <!-- This overrides the default WAR deployment and deploys the exploded war -->
                  <location>${project.build.directory}/${project.build.finalName}</location>
                  <properties>
                    <!-- This makes sure the final directory/artifact matches the build name and 
                    		not with the artifact name which is different -->
                    <context>${project.build.finalName}</context>
                  </properties>
                </deployable>
              </deployables>
            </configuration>
            <executions>
              <execution>
                <id>redeploy</id>
                <goals>
                  <goal>redeploy</goal>
                </goals>
                <phase>install</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
